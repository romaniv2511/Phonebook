{"version":3,"file":"static/js/86.9c625b8f.chunk.js","mappings":"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","sources":["redux/contacts/contactsSelectors.jsx","components/Filter/Filter.jsx","components/Contacts/Contact/Contact.styled.jsx","components/Contacts/Contact/Contact.jsx","components/Forms/ContactForm/ContactForm.jsx","components/Modals/EditContactModal.jsx","components/Contacts/ContactsList/ContactsList.jsx","components/Modals/AddContactModal.jsx","pages/Contacts.jsx"],"sourcesContent":["export const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n","import { useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/contactsSelectors';\nimport { SearchIcon } from '@chakra-ui/icons';\nimport { InputGroup, InputLeftElement, Input } from '@chakra-ui/react';\n\nexport const Filter = ({ setFilter }) => {\n  const contacts = useSelector(selectContacts);\n  const contactCount = contacts.length;\n  const text = `search among ${contactCount} contacts`;\n\n  return (\n    <InputGroup>\n      <InputLeftElement\n        pointerEvents=\"none\"\n        children={<SearchIcon color=\"teal\" />}\n      />\n      <Input\n        w=\"400px\"\n        name=\"filter\"\n        type=\"text\"\n        placeholder={text}\n        onChange={e => setFilter(e.target.value)}\n      />\n    </InputGroup>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Name = styled.span`\n  font-weight: bold;\n`;\n","import PropTypes from 'prop-types';\nimport { Name } from './Contact.styled';\n\nexport const Contact = ({ name, number }) => (\n  <div>\n    <Name>{name}:</Name>\n    <span> {number}</span>\n  </div>\n);\n\nContact.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as Yup from 'yup';\nimport PropTypes from 'prop-types';\nimport { addContact, editContact } from 'redux/contacts/contactsOperations';\nimport { selectContacts } from 'redux/contacts/contactsSelectors';\nimport {\n  FormErrorMessage,\n  FormLabel,\n  FormControl,\n  Input,\n  Button,\n  Flex,\n} from '@chakra-ui/react';\nimport { useToast } from '@chakra-ui/toast';\nimport { useState } from 'react';\n\nconst schema = Yup.object().shape({\n  name: Yup.string()\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      'Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore'\n    )\n    .max(25)\n    .required(),\n  number: Yup.string()\n    .min(5)\n    .max(16)\n    .matches(\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n      'Phone number must be at digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n\n    .required(),\n});\n\nexport const ContactForm = ({\n  onClose,\n  contact = { name: '', number: '' },\n  type,\n}) => {\n  const [name, setName] = useState(contact.name);\n  const [number, setNumber] = useState(contact.number);\n\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm({\n    resolver: yupResolver(schema),\n  });\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const toast = useToast();\n\n  const onChange = e => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const onSubmit = data => {\n    const { name, number } = data;\n\n    if (type === 'add') {\n      const isDuplicated = contacts.some(\n        i => i.name.toLowerCase() === name.toLowerCase()\n      );\n      if (isDuplicated) {\n        toast(\n          {\n            title: `\"${name}\" `,\n            description: 'is already in contacts',\n            position: 'top',\n            status: 'info',\n            duration: 3000,\n            isClosable: true,\n          }\n          //\n        );\n        return;\n      }\n      dispatch(addContact(data));\n    }\n    if (type === 'edit') {\n      dispatch(editContact({ id: contact.id, name, number }));\n    }\n    reset();\n    onClose();\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <FormControl isInvalid={errors.name}>\n        <FormLabel htmlFor=\"name\">\n          Name\n          <Input\n            id=\"name\"\n            {...register('name')}\n            type=\"text\"\n            onChange={onChange}\n            value={name}\n          />\n          <FormErrorMessage>{errors.name?.message}</FormErrorMessage>\n        </FormLabel>\n        <FormLabel htmlFor=\"number\">\n          Number\n          <Input\n            id=\"number\"\n            {...register('number')}\n            type=\"tel\"\n            onChange={onChange}\n            value={number}\n          />\n          <FormErrorMessage>{errors.number?.message}</FormErrorMessage>\n        </FormLabel>\n        <Flex mt=\"40px\" justifyContent=\"right\">\n          <Button type=\"submit\" colorScheme=\"blue\" mr={3}>\n            Save\n          </Button>\n          <Button onClick={onClose}>Cancel</Button>\n        </Flex>\n      </FormControl>\n    </form>\n  );\n};\n\nContactForm.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  type: PropTypes.string.isRequired,\n  contact: PropTypes.exact({\n    id: PropTypes.string,\n    name: PropTypes.string,\n    number: PropTypes.string,\n  }),\n};\n","import {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  ModalCloseButton,\n  useDisclosure,\n  Button,\n} from '@chakra-ui/react';\nimport { EditIcon } from '@chakra-ui/icons';\n\nimport { ContactForm } from 'components/Forms/ContactForm/ContactForm';\n\nexport const EditContactModal = ({ contact }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <>\n      <Button onClick={onOpen} colorScheme=\"teal\" variant=\"ghost\" p=\"8px\">\n        <EditIcon color=\"teal\" />\n      </Button>\n\n      <Modal closeOnOverlayClick={false} isOpen={isOpen} onClose={onClose}>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Edit contact</ModalHeader>\n          <ModalCloseButton />\n\n          <ModalBody pb={6}>\n            <ContactForm contact={contact} onClose={onClose} type=\"edit\" />\n          </ModalBody>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/contactsOperations';\nimport {\n  selectContacts,\n  selectIsLoading,\n} from 'redux/contacts/contactsSelectors';\nimport { Filter } from 'components/Filter/Filter';\nimport { Contact } from '../Contact/Contact';\n// import { List } from './ContactsList.styled';\nimport { EditContactModal } from 'components/Modals/EditContactModal';\nimport { DeleteIcon } from '@chakra-ui/icons';\nimport { Button, Flex, List } from '@chakra-ui/react';\n\nexport const ContactsList = () => {\n  const [filter, setFilter] = useState('');\n  const [currentContactId, setCurrentContactId] = useState('');\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsLoading);\n\n  if (!contacts.length) return;\n\n  const filtredContacts = contacts.filter(\n    contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase()) ||\n      contact.number.includes(filter)\n  );\n\n  return (\n    <>\n      <Filter setFilter={value => setFilter(value)} />\n      <List>\n        {filtredContacts.map(({ id, name, number }) => {\n          const showSpinner = isLoading && currentContactId === id;\n\n          return (\n            <Flex\n              alignItems=\"center\"\n              justifyContent=\"space-between\"\n              key={id}\n              borderBottom=\"1px solid black\"\n            >\n              <Contact name={name} number={number} />\n              <div>\n                <EditContactModal contact={{ id, name, number }} />\n                <Button\n                  isLoading={showSpinner}\n                  spinnerPlacement=\"start\"\n                  colorScheme=\"teal\"\n                  variant=\"ghost\"\n                  onClick={() => {\n                    setCurrentContactId(id);\n                    dispatch(deleteContact(id));\n                  }}\n                >\n                  <DeleteIcon />\n                </Button>\n              </div>\n            </Flex>\n          );\n        })}\n      </List>\n    </>\n  );\n};\n","import {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  ModalCloseButton,\n  useDisclosure,\n  Button,\n} from '@chakra-ui/react';\nimport { AddIcon } from '@chakra-ui/icons';\n\nimport { ContactForm } from 'components/Forms/ContactForm/ContactForm';\n\nexport const AddContactModal = () => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <>\n      <Button\n        onClick={onOpen}\n        colorScheme=\"teal\"\n        borderRadius=\"8px\"\n        p=\"8px\"\n        mt=\"8px\"\n        mb=\"8px\"\n      >\n        <AddIcon mr=\"4px\" />\n        Add contact\n      </Button>\n\n      <Modal closeOnOverlayClick={false} isOpen={isOpen} onClose={onClose}>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Create new contact</ModalHeader>\n          <ModalCloseButton />\n\n          <ModalBody pb={6}>\n            <ContactForm onClose={onClose} type=\"add\" />\n          </ModalBody>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n","import { ContactsList } from 'components/Contacts/ContactsList/ContactsList';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/contactsOperations';\nimport { AddContactModal } from 'components/Modals/AddContactModal';\nimport { Container } from 'components/Container/Container';\nimport { Spinner } from '@chakra-ui/react';\nimport { selectIsLoading } from 'redux/contacts/contactsSelectors';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  return (\n    <Container>\n      <AddContactModal />\n      {isLoading && (\n        <Spinner\n          display=\"block\"\n          thickness=\"4px\"\n          speed=\"0.65s\"\n          emptyColor=\"gray.200\"\n          color=\"teal\"\n          size=\"xl\"\n        />\n      )}\n      <ContactsList />\n    </Container>\n  );\n};\n\nexport default Contacts;\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","Filter","setFilter","contactCount","useSelector","length","text","pointerEvents","children","color","I","w","name","type","placeholder","onChange","e","target","value","Name","styled","Contact","number","schema","Yup","shape","matches","max","required","min","ContactForm","onClose","contact","useState","setName","setNumber","useForm","resolver","yupResolver","register","handleSubmit","reset","errors","formState","dispatch","useDispatch","toast","useToast","onSubmit","data","some","i","toLowerCase","title","description","position","status","duration","isClosable","addContact","editContact","id","isInvalid","htmlFor","message","mt","justifyContent","colorScheme","mr","onClick","EditContactModal","useDisclosure","isOpen","onOpen","variant","p","closeOnOverlayClick","pb","ContactsList","filter","currentContactId","setCurrentContactId","filtredContacts","includes","map","showSpinner","alignItems","borderBottom","spinnerPlacement","deleteContact","AddContactModal","borderRadius","mb","useEffect","fetchContacts","Container","display","thickness","speed","emptyColor","size"],"sourceRoot":""}